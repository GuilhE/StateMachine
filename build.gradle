import org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension

buildscript {
    ext.kotlin_version = '1.9.22'
    ext.atomicfu_version = '0.23.2'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicfu_version"
    }
}

repositories {
    mavenCentral()
}

group GROUP
version VERSION_NAME

apply plugin: "org.jetbrains.kotlin.multiplatform"
apply plugin: "kotlinx-atomicfu"

kotlin {
    applyDefaultHierarchyTemplate()
    jvm()
    js {
        browser {
        }
        nodejs {
        }
    }
    wasmJs {
        nodejs
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    macosX64("macos")
    linuxX64()
    mingwX64()

    sourceSets {
        commonMain {
            kotlin.srcDir('src/main/')
            dependencies {
                implementation kotlin('stdlib-common')
                api "org.jetbrains.kotlinx:atomicfu:$atomicfu_version"
            }
        }
        commonTest {
            kotlin.srcDir('src/test/')
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            task {
                kotlinOption.jvmTarget = JavaVersion.VERSION_1_8
            }

            dependencies {
                compileOnly kotlin('stdlib-jdk8')
                compileOnly kotlin('test-annotations-common')
            }
        }

        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                compileOnly kotlin('stdlib-js') }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        wasmJs {
            sourceSets.commonMain
            dependencies {
                compileOnly kotlin('stdlib-wasm-js')
            }
        }
        wasmJsTest {
            dependencies {
                implementation kotlin('test-wasm-js')
            }
        }
        macosMain {
        }
        macosTest {
        }
    }
}

extensions.findByType(NodeJsRootExtension.class).with {
    // canary nodejs that supports recent Wasm GC changes
    it.nodeVersion = '21.0.0-v8-canary202309167e82ab1fa2'
    it.nodeDownloadBaseUrl = 'https://nodejs.org/download/v8-canary'
}